name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0). If empty, a dev draft release is created (e.g., zap-dev-<short_sha>).'
        required: false
        type: string

permissions:
  contents: write

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_release_step.outputs.tag_name }} # Actual tag created/used
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Release Tag and Name
        id: release_vars
        run: |
          VERSION_INPUT="${{ inputs.version }}"
          if [[ -z "$VERSION_INPUT" ]]; then
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            echo "TAG_NAME=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Development Build (zap-dev-${SHORT_SHA})" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${VERSION_INPUT}" >> $GITHUB_OUTPUT
            echo "RELEASE_NAME=Release ${VERSION_INPUT}" >> $GITHUB_OUTPUT
            echo "IS_PRERELEASE=false" >> $GITHUB_OUTPUT # Or determine based on version format, e.g. -rc, -beta
          fi

      - name: Create GitHub Release
        id: create_release_step
        uses: taiki-e/create-gh-release-action@v1
        with:
          # Use the tag_name from the previous step.
          # create-gh-release-action will create this tag if it doesn't exist.
          tag_name: ${{ steps.release_vars.outputs.TAG_NAME }}
          release_name: ${{ steps.release_vars.outputs.RELEASE_NAME }}
          body: |
            Automated release for ${{ steps.release_vars.outputs.TAG_NAME }}.
            Binaries for macOS (x86_64, aarch64) and Linux (x86_64-musl) will be attached.
          draft: true
          prerelease: ${{ steps.release_vars.outputs.IS_PRERELEASE }}
          update_existing_release: true
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_assets:
    name: Build and Upload Assets for ${{ matrix.target }}
    needs: create_release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (for static Linux binary)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          # Ensures static linking for musl target. Harmless for others.
          RUSTFLAGS: ${{ matrix.target == 'x86_64-unknown-linux-musl' && '-C target-feature=+crt-static' || '' }}

      - name: Upload Rust Binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: zap
          tag: ${{ needs.create_release.outputs.tag_name }}
          target: ${{ matrix.target }} # Optional; action infers if not set
          token: ${{ secrets.GITHUB_TOKEN }}
